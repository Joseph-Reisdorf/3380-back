
IMPORTANT: <> denotes a placeholder. Replace the placeholder with the actual value.

-- Contents of this directory --

*** Files ***
Index.mjs:: 
    - The main entry point for the application. This has many responsibilites. It is the file that is called to startup the backend server.
    - It imports libraries and the different routes the app uses. (Please keep your route imports organized with the other route imports)
    - It initializes the express server.
    - There is a lot of middleware (cors(), express.json(), express.urlencoded(), etc) that is used to parse the incoming requests. YOu
      will likely not touch this part. 
    - Then it uses the routes to handle the incoming requests. THIS IS MOST LIKELY THE MOST IMPORTANT PART YOU WILL USE.
    - It reads the .evn.local variables (or on heroku the config vars) to find the valued defined in process.env.<variable_name>
    - It initializes the database connection with app.listen()
    
    * In effect, this part does a lot, but for your purposes, you will likely only need to worry about adding and importing routes.
        Defining routes in this way with app.use("/<url route string>" , <route file>) creates that route in the routing area. In 
        effect, the asscoiated route file will handle the requests with that (<url route string> + <route in imported route file>) in the
        route file itself. 
            Example: 
                In index.mjs: app.use("/api", apiRoute)
                In apiRoute.mjs: router.get("/test", (req, res) => {res.send("Hello World")})
                    apiRoute, now has a route to /api/test that will return "Hello World" when accessed.
                
                If we added to apiRoute.mjs: router.get("/", (req, res) => {res.send("Accessing /api")})
                    apiRoute, now has a route to /api/ that will return "Accessing /api" when accessed.

database.mjs::
    - This is the file that is used to set up the connection to the database.
    - It is seperated from the index.mjs for cleaner exports. 
    - It uses a pooling connection from the library mysql2 to connect to the database.

.env.local::
    - This is used to define the environment variables that are used in the application.
    - It is not included on the github, and is by default a hidden file (starts with . in the name)
    - These define sensitive and/or changing variables in the application. 
    - You will likely not need to add more but will reference this file to get these values.

    - For example, in this file, it is used to hide our salt values and JTW secret (not important to you probably, just login stuff),
      and it has the database connection information. You likely, in this file, will not need to access these variables at all,
      unlike in the front end where you will need to access the REACT_APP_ variables in its associated (.env.local file)

package.json::
    - It contains the dependencies that the application uses.
    - If you add a library, use npm install <library_name> --save to add it to the dependencies.
    - If you are starting to develop the application, use npm install to install all the dependencies.
    - It also contains all the meta-information about the application.
        - It contains the name, version, description, and other metadata about the application.
    
package-lock.json::
    - This is a file that is automatically generated by npm when you install a new library.
    - It is used to keep track of the exact version of the library that was installed.
    - You will not need to touch this file.

*** Directories ***
routes/:: READ CAREFULLY
    - These are directories that define the different routes that the application uses.
    - Each route is defined in its own file.
    - It is meant to be modular, in the sense that related requests are grouped together by the same route.
    - The seperation allows the controllers to be imported as needed in the routes.
        For example:
            * We might import getPerson.mjs and addPerson.mjs from the controllers directory into
              the /routes/debug_person_route.mjs to get a person from the database.

            * We also might use getPerson.mjs in the hypothetical /route/person_route.mjs use the same 
              database call to get a person in another part of the application.

    - The routes are then imported into the index.mjs file to be used in the application.
    - Read ./routes/README_routes for conventions and more information on how to use the routes.

controllers/::
    - These are the files that actually handle the requests made to the server. 
    - They are imported into the routes to be used in the routes, so that one persons request might be reused. 
    - They are seperated by functionality, but one may contain multiple functions for related requests.
    - They are also able to be used by any route that imports them, so that the same request can be used in multiple places.
    - Read ./controllers/README_controllers for conventions and more information on how to use the controllers.

node_modules/::
    - This is the directory that contains all the libraries that are used in the application.
    - You will NOT need to touch this directory at all. Seriously, please don't :0

